---
interface Props {
  lang: string;
  height?: string;
  className?: string;
}

const { lang, height = "650px", className = "" } = Astro.props;

// ConfiguraciÃ³n de formularios de registro segÃºn idioma
const tallyConfig = {
  es: {
    formId: "3586",
    url: "https://course.desciquark.com/es/registro/?ld_register_id=3586",
    title: "ðŸ§ª Registro - DeSci Quark"
  },
  en: {
    formId: "2160", 
    url: "https://course.desciquark.com/register/?ld_register_id=2160",
    title: "ðŸ§ª Registration - DeSci Quark"
  }
};

// Obtener configuraciÃ³n segÃºn idioma, defaultear a espaÃ±ol si no existe
const config = tallyConfig[lang as keyof typeof tallyConfig] || tallyConfig.es;
const embedUrl = `${config.url}?transparentBackground=1&hideTitle=1`;
---

<div class={`tally-form-container ${className}`}>
  <iframe 
    data-tally-src={embedUrl}
    loading="lazy"
    width="100%" 
    height={height}
    frameborder="0" 
    marginheight="0" 
    marginwidth="0" 
    title={config.title}
    class="w-full rounded-lg shadow-sm"
    style={`height: ${height}; min-height: ${height};`}>
  </iframe>
</div>

<script>
  interface TallyWindow extends Window {
    Tally?: {
      loadEmbeds: () => void;
      init?: () => void;
    };
  }

  declare const window: TallyWindow;

  class TallyManager {
    private static instance: TallyManager;
    private scriptLoaded = false;
    private initialized = false;

    static getInstance(): TallyManager {
      if (!TallyManager.instance) {
        TallyManager.instance = new TallyManager();
      }
      return TallyManager.instance;
    }

    async loadScript(): Promise<void> {
      return new Promise((resolve, reject) => {
        // Verificar si el script ya estÃ¡ cargado
        if (this.scriptLoaded || document.querySelector('script[src*="tally.so/widgets/embed.js"]')) {
          this.scriptLoaded = true;
          resolve();
          return;
        }

        const script = document.createElement('script');
        script.src = 'https://tally.so/widgets/embed.js';
        script.async = true;
        
        script.onload = () => {
          this.scriptLoaded = true;
          resolve();
        };
        
        script.onerror = () => {
          reject(new Error('Failed to load Tally script'));
        };
        
        document.head.appendChild(script);
      });
    }

    async initialize(): Promise<void> {
      if (this.initialized) return;

      try {
        await this.loadScript();
        
        // Esperar a que Tally estÃ© disponible
        const maxAttempts = 20;
        let attempts = 0;
        
        const checkTally = (): Promise<void> => {
          return new Promise((resolve) => {
            const check = () => {
              attempts++;
              if (window.Tally) {
                window.Tally.loadEmbeds();
                this.initialized = true;
                resolve();
              } else if (attempts < maxAttempts) {
                setTimeout(check, 100);
              } else {
                console.warn('Tally failed to load after maximum attempts');
                resolve();
              }
            };
            check();
          });
        };

        await checkTally();
      } catch (error) {
        console.error('Error initializing Tally:', error);
      }
    }
  }

  // Inicializar cuando el DOM estÃ© listo
  function initializeTally() {
    const tallyManager = TallyManager.getInstance();
    tallyManager.initialize().catch(console.error);
  }

  // Ejecutar inmediatamente si el DOM ya estÃ¡ listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeTally);
  } else {
    initializeTally();
  }

  // TambiÃ©n ejecutar cuando la pÃ¡gina se muestre (Ãºtil para navegaciÃ³n con cache)
  window.addEventListener('pageshow', initializeTally);
</script>

<style>
  .tally-form-container {
    position: relative;
    overflow: hidden;
  }

  .tally-form-container iframe {
    border: none;
    background: transparent;
  }
</style>
