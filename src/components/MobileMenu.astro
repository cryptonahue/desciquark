---
// MobileMenu.astro
// Componente para el menú en dispositivos móviles

import { getLangFromUrl, useTranslations } from '../i18n/utils';

interface Props {
  lang: string;
}

const { lang } = Astro.props;
const t = useTranslations(lang);

// Definir elementos del menú de navegación
const navItems = [
  {
    label: lang === 'en' ? 'About the Course' : 'Acerca del Curso',
    href: lang === 'en' ? '/en/#course-overview' : '/#course-overview'
  },
  {
    label: lang === 'en' ? 'Course Content' : 'Contenido del Curso',
    href: lang === 'en' ? '/en/#course-content' : '/#course-content'
  },
  {
    label: lang === 'en' ? 'Speakers' : 'Speakers',
    href: lang === 'en' ? '/en/#speakers' : '/#speakers'
  },
  {
    label: lang === 'en' ? 'FAQ' : 'FAQ',
    href: lang === 'en' ? '/en/#faq' : '/#faq'
  }
];

// Obtener URL alternativas para el selector de idioma
const currentPath = Astro.url.pathname;
const esPath = currentPath.startsWith('/en/') 
  ? currentPath.replace('/en/', '/') 
  : currentPath;
const enPath = currentPath.startsWith('/en/') 
  ? currentPath 
  : '/en' + currentPath;
---

<div id="mobile-menu" class="fixed top-0 right-0 bottom-0 w-full bg-white z-50 transform translate-x-full transition-transform duration-300 ease-in-out flex flex-col overflow-x-hidden" style="left: 100%;">
  <div class="flex items-center justify-between p-4 border-b">
    <a href={lang === 'en' ? '/en/' : '/'} class="flex items-center gap-2">
      <img src="/images/logo-80.webp" alt="DeSci Quark" class="h-10" style="width: 3.5rem;" width="56" height="40" />
      <span class="text-xl font-bold text-primary-600">DeSci Quark</span>
    </a>
    <button id="close-menu" class="p-2 text-gray-500 hover:text-gray-700">
      <img src="/icons/close.svg" alt="Cerrar menú" class="h-6 w-6" />
    </button>
  </div>
  
  <div class="flex-1 overflow-y-auto p-4">
    <div class="space-y-1">
      {navItems.map(item => (
        <a 
          href={item.href} 
          class="block px-3 py-4 text-base font-medium text-gray-700 rounded-md hover:bg-primary-50 hover:text-primary-600 transition-colors duration-200"
        >
          {item.label}
        </a>
      ))}
    </div>
  </div>
  
  <div class="p-4 border-t">
    <div class="grid grid-cols-2 gap-3 w-full">
      <a href={lang === 'es' ? 'https://course.desciquark.com/courses/fundamentos-de-blockchain-y-herramientas-avanzadas-para-cientificos-usando-cardano/#login' : 'https://course.desciquark.com/courses/blockchain-fundamentals-and-advanced-tools-for-scientists-using-cardano/#login'} class="btn btn-outline py-2 px-2 text-center text-sm whitespace-nowrap overflow-hidden">
        {t('login')}
      </a>
      <a href={lang === 'es' ? 'https://course.desciquark.com/es/registro/?ld_register_id=3586' : 'https://course.desciquark.com/register/?ld_register_id=2160'} class="btn btn-primary py-2 px-2 text-center text-sm whitespace-nowrap overflow-hidden">
        {t('hero.registerBtn')}
      </a>
    </div>
  </div>
</div>

<style>
  /* Prevenir scroll horizontal - menú completamente fuera del viewport */
  #mobile-menu {
    max-width: 100vw;
    width: 100vw;
    right: 0;
  }
  
  /* Asegurar que los botones no causen overflow */
  .btn {
    min-width: 0;
    max-width: 100%;
  }
  
  /* Prevenir scroll horizontal global */
  body.overflow-hidden {
    overflow-x: hidden !important;
    position: fixed;
    width: 100%;
  }
  
  /* Forzar que no haya scroll horizontal */
  html, body {
    max-width: 100vw;
    overflow-x: hidden;
  }
</style>

<script>
  // Toggle mobile menu
  document.addEventListener('DOMContentLoaded', () => {
    const menuButton = document.getElementById('menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const closeButton = document.getElementById('close-menu');
    const telegramButton = document.getElementById('telegram-button');
    
    if (menuButton && mobileMenu && closeButton) {
      menuButton.addEventListener('click', () => {
        mobileMenu.style.left = '0';
        mobileMenu.classList.remove('translate-x-full');
        document.body.classList.add('overflow-hidden');
        document.documentElement.style.overflowX = 'hidden';
        
        // Ocultar botón de Telegram
        if (telegramButton) {
          telegramButton.classList.add('hidden');
        }
      });
      
      const closeMenu = () => {
        mobileMenu.classList.add('translate-x-full');
        setTimeout(() => {
          mobileMenu.style.left = '100%';
        }, 300); // Después de la animación
        document.body.classList.remove('overflow-hidden');
        document.documentElement.style.overflowX = '';
        
        // Mostrar botón de Telegram
        if (telegramButton) {
          telegramButton.classList.remove('hidden');
        }
      };
      
      closeButton.addEventListener('click', closeMenu);
      
      // Close menu when clicking on links
      const menuLinks = mobileMenu.querySelectorAll('a');
      menuLinks.forEach(link => {
        link.addEventListener('click', closeMenu);
      });
    }
  });
</script>
