---
import { getLangFromUrl, useTranslations } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<section class="hero-section py-16 md:py-24">
  <div class="container mx-auto px-4 hero-content">
    <div class="flex flex-col lg:flex-row items-center gap-8 lg:gap-16">
      <div class="w-full lg:w-1/2">
        <h1 class="text-3xl md:text-4xl lg:text-5xl font-bold text-white mb-6 animate-fade-in">
          {t('hero.title')}
        </h1>
        <p class="text-blue-100 text-lg mb-8 max-w-xl">
          {t('hero.description')}
        </p>
        <div class="flex flex-col sm:flex-row gap-4">
          <button id="openModalBtn" class="btn btn-primary bg-white text-primary-600 hover:bg-blue-50 shadow-lg">
            {t('hero.registerBtn')}
          </button>
          <a href="#course-content" class="btn btn-outline text-white border-white hover:bg-white hover:text-primary-600 shadow-md">
            {t('hero.learnMoreBtn')}
          </a>
        </div>
      </div>
      <div class="w-full lg:w-1/2">
        <div class="glass-card bg-white/20 border border-white/30 relative overflow-hidden rounded-xl shadow-xl">
          <div class="aspect-w-16 aspect-h-9">
            <iframe 
              src="https://www.youtube.com/embed/lesson-intro" 
              title="Lesson 0.1: Introduction" 
              frameborder="0" 
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
              allowfullscreen
              class="absolute inset-0 w-full h-full rounded-xl">
            </iframe>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Modal de registro (oculto por defecto) -->
<div id="registerModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
  <div class="bg-white rounded-2xl p-6 max-w-md w-full mx-4 relative animate-fade-in shadow-xl">
    <button id="closeModalBtn" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    
    <h2 class="text-2xl font-bold text-gray-800 mb-4">{t('registerModal.title')}</h2>
    <p class="text-gray-600 mb-6">{t('registerModal.description')}</p>
    
    <form id="registerForm" class="space-y-4">
      <div>
        <label for="name" class="block text-sm font-medium text-gray-700 mb-1">{t('registerModal.nameLabel')}</label>
        <input type="text" id="name" name="name" required
          class="w-full px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-primary-500 focus:outline-none"
          placeholder={t('registerModal.namePlaceholder')}
        />
      </div>
      
      <div>
        <label for="email" class="block text-sm font-medium text-gray-700 mb-1">{t('registerModal.emailLabel')}</label>
        <input type="email" id="email" name="email" required
          class="w-full px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-primary-500 focus:outline-none"
          placeholder={t('registerModal.emailPlaceholder')}
        />
      </div>
      
      <button type="submit" class="w-full btn btn-primary">
        {t('registerModal.submitBtn')}
      </button>
    </form>
  </div>
</div>

<script>
  // Modal functionality
  const openModalBtn = document.getElementById('openModalBtn');
  const closeModalBtn = document.getElementById('closeModalBtn');
  const registerModal = document.getElementById('registerModal');
  const registerForm = document.getElementById('registerForm');

  if (openModalBtn && closeModalBtn && registerModal) {
    openModalBtn.addEventListener('click', () => {
      registerModal.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    });

    closeModalBtn.addEventListener('click', () => {
      registerModal.classList.add('hidden');
      document.body.style.overflow = 'auto';
    });

    // Close modal if clicking outside
    registerModal.addEventListener('click', (e) => {
      if (e.target === registerModal) {
        registerModal.classList.add('hidden');
        document.body.style.overflow = 'auto';
      }
    });
  }

  // Form submission
  if (registerForm) {
    registerForm.addEventListener('submit', (e) => {
      e.preventDefault();
      
      const formData = new FormData(registerForm);
      const name = formData.get('name');
      const email = formData.get('email');
      
      // Aquí iría la lógica para enviar los datos al servidor
      console.log('Form submitted:', { name, email });
      
      // Mostrar mensaje de éxito
      alert('¡Gracias por registrarte! Te contactaremos pronto.');
      
      // Cerrar modal
      registerModal.classList.add('hidden');
      document.body.style.overflow = 'auto';
      
      // Reset form
      registerForm.reset();
    });
  }
</script>
